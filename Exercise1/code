Exercise 1

*/

MADE BY : 
Santiago Pérez Delgado
Francisco José Ramos Moya

/*

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

void printInfo(char *name) {
     printf("Process %s - PID: %d, PPID: %d\n", name, getpid(),
getppid());
}

int main() {
     pid_t p0, p1, p2, p3, p4, p5, p6;

     p0 = fork();
     if (p0 == 0) {
         // P1
         printInfo("P1");
     } else {
         waitpid(p0, NULL, 0);  // Wait for P1 to complete
         p2 = fork();
         if (p2 == 0) {
             // P2
             waitpid(p5, NULL, 0);  // Wait for P5 to complete
             int status;
             pid_t child_pid = wait(&status);  // Wait for either P4 or
P6 to complete
             if (child_pid == p4) {
                 printInfo("P4");
             } else if (child_pid == p6) {
                 printInfo("P6");
             }
             printInfo("P2");
         } else {
             p3 = fork();
             if (p3 == 0) {
                 // P3
                 printInfo("P3");
             } else {
                 wait(NULL);  // Wait for any child to complete
                 p4 = fork();
                 if (p4 == 0) {
                     // P4
                     printInfo("P4");
                 } else {
                     p5 = fork();
                     if (p5 == 0) {
                         // P5
                         printInfo("P5");
                     } else {
                         wait(NULL);  // Wait for any child to complete
                         p6 = fork();
                         if (p6 == 0) {
                             // P6
                             printInfo("P6");
                         } else {
                             wait(NULL);  // Wait for any child to
complete
                             p0 = fork();
                             if (p0 == 0) {
                                 // P0
                                 waitpid(p1, NULL, 0);  // Wait for P1 to
complete
                                 execlp("cat", "cat", "program.c", NULL);
                             } else {
                                 wait(NULL);  // Wait for any child to
complete
                             }
                         }
                     }
                 }
             }
         }
     }

     return 0;
