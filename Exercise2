Exercise 2

*/

MADE BY : 
Santiago Pérez Delgado
Francisco José Ramos Moya

/*

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define NUM_THREADS 4

sem_t semaphore1, semaphore2, semaphore3, semaphore4;

int counter = 0;

void* thread0(void* arg) {
     int id = *((int*)arg);

     if (id == 0) {

         printf("I\n");

         sem_post(&semaphore2);

         sem_wait(&semaphore1);

         printf("J\n");
     }

     return NULL;
}

void* thread1(void* arg) {
     int id = *((int*)arg);

     if (id == 1) {
         sem_wait(&semaphore2);
         printf("D\n");
         sem_post(&semaphore3);
         sem_wait(&semaphore2);
         printf("E\n");
        sem_post(&semaphore4);

   }

     return NULL;
}

void* thread2(void* arg) {
     int id = *((int*)arg);

     if (id == 2) {
         sem_wait(&semaphore3);
         printf("F\n");
         sem_post(&semaphore4);

         sem_wait(&semaphore3);
         printf("G\n");

        sem_wait(&semaphore3);
         printf("H\n");
     }

     return NULL;
}

void* thread3(void* arg) {
     int id = *((int*)arg);

     if (id == 3) {
         sem_wait(&semaphore4);
         printf("A\n");
         sem_post(&semaphore3);
         sem_post(&semaphore1);

         printf("B\n");
        sem_wait(&semaphore4);
         printf("C\n");
         sem_post(&semaphore2);
        sem_post(&semaphore3);

     }

     return NULL;
}

int main() {
     pthread_t threads[NUM_THREADS];
     int thread_ids[NUM_THREADS];
     int rc;
     long t;

     sem_init(&semaphore1, 0, 0);
     sem_init(&semaphore2, 0, 0);
     sem_init(&semaphore3, 0, 0);
     sem_init(&semaphore4, 0, 0);

     // Crear hilos
     for (t = 0; t < NUM_THREADS; t++) {
         thread_ids[t] = t;
         if (t == 0) {
             rc = pthread_create(&threads[t], NULL, thread0,
(void*)&thread_ids[t]);
         } else if (t == 1) {
             rc = pthread_create(&threads[t], NULL, thread1,
(void*)&thread_ids[t]);
         } else if (t == 2) {
             rc = pthread_create(&threads[t], NULL, thread2,
(void*)&thread_ids[t]);
         } else {
             rc = pthread_create(&threads[t], NULL, thread3,
(void*)&thread_ids[t]);
         }

         if (rc) {
             printf("Error: return code from pthread_create() is %d\n",
rc);
             exit(-1);
         }
     }

     // Esperar a que los hilos terminen
     for (t = 0; t < NUM_THREADS; t++) {
         pthread_join(threads[t], NULL);
     }

     // Destruir semáforos
     sem_destroy(&semaphore1);
     sem_destroy(&semaphore2);
     sem_destroy(&semaphore3);
     sem_destroy(&semaphore4);

     return 0;
}
